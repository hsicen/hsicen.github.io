<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>hsicen</title>
    <updated>2021-07-22T13:42:51.249Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2021, hsicen</rights>
    <entry>
        <title type="html"><![CDATA[Retrofit]]></title>
        <id>http://localhost:4000/post/retrofit/</id>
        <link href="http://localhost:4000/post/retrofit/">
        </link>
        <updated>2021-07-22T13:37:03.000Z</updated>
        <content type="html"><![CDATA[<h5 id="retrofit的简单使用">Retrofit的简单使用</h5>
<h6 id="1-添加依赖">1. 添加依赖</h6>
<pre><code class="language-groovy">implementation 'com.squareup.retrofit2:retrofit:2.6.0'
implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.0'
implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
</code></pre>
<h6 id="2-创建一个interface作为web-service的请求集合在上面用注解写入需要配置的请求方法">2. 创建一个interface作为Web Service的请求集合，在上面用注解写入需要配置的请求方法</h6>
<pre><code class="language-kotlin">interface GithubService {
	@GET(&quot;/users/{user}/repos&quot;)
	fun listRepos(@Path(&quot;user&quot;) user: String): Call&lt;List&lt;Repo&gt;&gt;
}
</code></pre>
<h6 id="3-获取retrofit实例单例对象">3. 获取Retrofit实例(单例对象)</h6>
<pre><code class="language-kotlin">object Net {
	private val instance = Retrofit.Builder()
    	.addConverterFactory(GsonConverterFactory.create())
    	.baseUrl(&quot;https://api.github.com/&quot;)
    	.build()
    
    //泛型实例化
    inline fun &lt;reified T&gt; create():T = instance.create(T::class.java)
}
</code></pre>
<h6 id="4-创建出service-interface实例调用对应的接口方法创建出相应的可以用来发起网络请求的call对象">4. 创建出Service interface实例，调用对应的接口方法，创建出相应的可以用来发起网络请求的Call对象</h6>
<pre><code class="language-kotlin">val githubService = Net.create&lt;GithubService&gt;()
val listRepos = githubService.listRepos(&quot;hsicen&quot;)
</code></pre>
<h6 id="5-使用callexecute或者callenqueue发起请求">5. 使用Call.execute()或者Call.enqueue()发起请求</h6>
<pre><code class="language-kotlin">listRepos.enqueue(object : Callback&lt;List&lt;Repo&gt;&gt; {
	override fun onFailure(call: Call&lt;List&lt;Repo&gt;&gt;, t: Throwable) {
		tv_content.text = t.message
	}
	override fun onResponse(call: Call&lt;List&lt;Repo&gt;&gt;, response: Response&lt;List&lt;Repo&gt;&gt;) {
		tv_content.text = response.body().toString()
	}
})
</code></pre>
<h5 id="retrofit源码分析">Retrofit源码分析</h5>
<p>首先我们从离我们最近的位置作为切入点(通常是业务代码的最后一行)，这里我们点进Call.enqueue()，看看里面的代码逻辑</p>
<pre><code class="language-java">void enqueue(Callback&lt;T&gt; callback);
</code></pre>
<p>发现这是一个接口，没有具体实现，切入失败；现在需要逐步回退寻找到下一个切入点<code>Retrofit.create()</code></p>
<pre><code class="language-java">public &lt;T&gt; T create(final Class&lt;T&gt; service) {
	Utils.validateServiceInterface(service);  //接口验证
	if (validateEagerly) {eagerlyValidateMethods(service);}  //提前验证所有方法的正确性，会用到反射
	//动态代理  创建一个运行时的类，Interface的每一个方法调用都会交由InvocationHandler来处理
	return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },new InvocationHandler() {
		private final Platform platform = Platform.get();
		private final Object[] emptyArgs = new Object[0];

		@Override public @Nullable Object invoke(Object proxy, Method method,@Nullable Object[] args) throws Throwable {
			// If the method is a method from Object then defer to normal invocation.
			if (method.getDeclaringClass() == Object.class) {//继承自Object的方法
				return method.invoke(this, args);
			}
			if (platform.isDefaultMethod(method)) {  //接口默认方法 Java8
				return platform.invokeDefaultMethod(method, service, proxy, args);
			}

 			//关键代码
			return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);
		}
	});
}
</code></pre>
<p>可以看到前面两行是代码健壮性验证，<strong>核心代码</strong>是<code>Proxy.newProxyInstance()</code>方法来创建Service实例。这个方法会为参数中的Interface创建一个对象，这个对象实现了Interface的每个方法，并且每个方法的实现都会雷同的：调用对象实例内部的一个<code>InvocationHandler</code>成员变量的invoke方法，并把自己的方法信息传递进去。这样就在实质上实现了代理逻辑；Interface中的方法全部由一个另外设定的InvocationHandler对象来进行代理操作。并且这些方法的具体实现是在运行时生成Interface实例时才确定的，而不是在编译时。这就是动态代理机制，大致像下面这样：</p>
<pre><code class="language-kotlin">//GithubService.kt
interface GithubService {
	@GET(&quot;/users/{user}/repos&quot;)
	fun listRepos(@Path(&quot;user&quot;) user: String): Call&lt;List&lt;Repo&gt;&gt;

	@GET(&quot;/users/hsicen&quot;)
	fun getUser(): Call&lt;User&gt;
}

//realService
class RealService : GithubService {
	private val invocationHandler = object : InvocationHandler {
		private val platform = Platform.get();

		override fun invoke(proxy: Any?, method: Method?, args: Array&lt;out Any&gt;?): Any {
			//扮演代理角色，对不同的方法做不同的处理
			return Any()
		}
	}

	override fun listRepos(user: String): Call&lt;List&lt;Repo&gt;&gt; {
		val method = GithubService::class.java.getMethod(&quot;listRepos&quot;)
		return invocationHandler.invoke(this, method, null) as Call&lt;List&lt;Repo&gt;&gt;
	}

	override fun getUser(): Call&lt;User&gt; {
		val method = GithubService::class.java.getMethod(&quot;getUser&quot;)
		return invocationHandler.invoke(this, method, null) as Call&lt;User&gt;
	}
}
</code></pre>
<p>接下主要关注<code>loadServiceMethod(method).invoke(args != null ? args : emptyArgs)</code>这句代码，<code>loadServiceMethod()</code>和<code>invoke()</code>是这个方法中关键作用的代码；<code>invoke()</code>就是Retrofit创建Service实例的关键</p>
<pre><code class="language-java">abstract @Nullable T invoke(Object[] args);
</code></pre>
<p>点进去发现，这是ServiceMethod的抽象方法；那么只好看看loadServiceMethod方法的具体逻辑</p>
<pre><code class="language-java">ServiceMethod&lt;?&gt; loadServiceMethod(Method method) {
	ServiceMethod&lt;?&gt; result = serviceMethodCache.get(method);
	if (result != null) return result;
	synchronized (serviceMethodCache) {
		result = serviceMethodCache.get(method);
			if (result == null) {
				result = ServiceMethod.parseAnnotations(this, method);
				serviceMethodCache.put(method, result);
			}
	}
	return result;
}
</code></pre>
<p>然后再点进<code>ServiceMethod.parseAnnotations()</code>方法</p>
<pre><code class="language-java">static &lt;T&gt; ServiceMethod&lt;T&gt; parseAnnotations(Retrofit retrofit, Method method) {
	RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);

	Type returnType = method.getGenericReturnType();
	if (Utils.hasUnresolvableType(returnType)) {
		throw methodError(method,&quot;Method return type must not include a type variable or wildcard: %s&quot;, returnType);
	}
	if (returnType == void.class) {
		throw methodError(method, &quot;Service methods cannot return void.&quot;);
	}

	return HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);
}
</code></pre>
<p>在这个方法中主要看<code>HttpServiceMethod.parseAnnotations()</code>，这个方法的代码就比较多了，我们主要看返回处的代码</p>
<pre><code class="language-java">if (!isKotlinSuspendFunction) {
	return new CallAdapted&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);
} else if (continuationWantsResponse) {
	//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.
	return (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) new SuspendForResponse&lt;&gt;(requestFactory,callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter);
} else {
	//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.
	return (HttpServiceMethod&lt;ResponseT, ReturnT&gt;) new SuspendForBody&lt;&gt;(requestFactory,callFactory, responseConverter, (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter,continuationBodyNullable);
}
</code></pre>
<p><code>HttpServiceMethod</code>是 <code>ServiceMethod</code>的子类，而<code>HttpServiceMethod.parseAnnotations()</code>是返回ServiceMethod对象，然后再执行ServiceMethod的invoke方法，这里我们可以直接查看HttpServiceMethod的invoke方法</p>
<pre><code class="language-java">@Override final @Nullable ReturnT invoke(Object[] args) {
	Call&lt;ResponseT&gt; call = new OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter);
	return adapt(call, args);
}
</code></pre>
<p>在invoke()中创建了一个OkHttpCall，然后调用了adapt()方法，返回我们需要的对象，那么我们就来看这个adapt()方法干了什么，继续点进去</p>
<pre><code class="language-java">protected abstract @Nullable ReturnT adapt(Call&lt;ResponseT&gt; call, Object[] args);
</code></pre>
<p>又是一个抽象方法，看来直接查看adapt()方法行不通，那么就只好看看OkHttpCall做了什么了，我们点进OkHttpCall看一下吧</p>
<pre><code class="language-java">final class OkHttpCall&lt;T&gt; implements Call&lt;T&gt; {
   .......
}
</code></pre>
<p>OkHttpCall是继承自Retrofit的Call的，也就是我们第一步没走通的那个Call(因为Call的enqueue方法是抽象的)，那么它有没有实现Call的enqueue()方法呢？</p>
<pre><code class="language-java">@Override public void enqueue(final Callback&lt;T&gt; callback) {
	okhttp3.Call call;
	synchronized (this) {
		call = rawCall;
		if (call == null &amp;&amp; failure == null) {
			call = rawCall = createRawCall();
		}
	}

	call.enqueue(new okhttp3.Callback() {
		@Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {
			Response&lt;T&gt; response = parseResponse(rawResponse);
			callback.onResponse(OkHttpCall.this, response);
		}

		@Override public void onFailure(okhttp3.Call call, IOException e) {
			callFailure(e);
		}
	});
}
</code></pre>
<p>由于enqueue()中代码量较大，我精简了这部分代码，enqueue()主要的工作是创建了一个okhttp3的Call，然后调用这个call的enqueue()方法去发起网络请求，然后将回调结果预处理之后，交由Retrofit的Callback</p>
<p>因此，到这里我们对Retrofit的工作流程就有了一个大致的了解，Retrofit通过动态代理创建出Service实例，然后通过这个实例调用对应的api得到一个Retrofit的Call对象，这个Call对象又创建了一个OkHttp3的Call实例去发起网络请求，然后将结果回调给Retrofit的Callback</p>
<p>在上面的分析过程中，有一个点还没有解决，那就是我们在创建出OkHttpCall对象后，然后调用了adapt()方法，这个adapt()方法是干什么用的呢？做了哪些处理？</p>
<p>在工作中我们知道，adapter是适配器的意思，作为中间桥梁的作用；猜测是不是对OkHttpCall的转换处理呢？因为我们知道Retrofit可以和RxJava结合使用，是不是就是因为这个adapt()的作用呢？当然，我们还需要查看源码，才能找到答案</p>
<p>找到刚才那个抽象的adapt()方法，查看其实现的地方，我们会看到HttpServiceMethod内部有一个静态内部类实现了该抽象方法</p>
<pre><code class="language-java">static final class CallAdapted&lt;ResponseT, ReturnT&gt; extends HttpServiceMethod&lt;ResponseT, ReturnT&gt; {
	private final CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter;

	CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,Converter&lt;ResponseBody, ResponseT&gt; responseConverter,CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter) {
		super(requestFactory, callFactory, responseConverter);
		this.callAdapter = callAdapter;
	}

	@Override protected ReturnT adapt(Call&lt;ResponseT&gt; call, Object[] args) {
		return callAdapter.adapt(call);
	}
}
</code></pre>
<p>在这个类中，创建了一个CallAdapter类，并将adapt()交由CallAdapter的adapt()来实现，这时候我们可以联想到在Retrofit初始化的时候，有这么一句代码 <code>addCallAdapterFactory(RxJava2CallAdapterFactory.create())</code>,加上这句代码后，我们就可以将Call对象转化为Observable对象，和RxJava进行交互了，看来这个adapt()方法很可能就是将OkHttpCall进行转换的作用，为了验证我们的猜想，继续深入源码分析</p>
<p>这个静态内部类的callAdapter是构造方法传进来的，我们一步一步的向上找</p>
<blockquote>
<p>CallAdapted -&gt; callAdapter<br>
HttpServiceMethod -&gt; createCallAdapter()<br>
Retrofit -&gt; callAdapter()<br>
Retrofit -&gt; nextCallAdapter()  callAdapterFactories.get(i)</p>
</blockquote>
<p>最后我们发现CallAdapter来自callAdapterFactories变量，那么我们现在就需要找到callAdapterFactories的来源</p>
<pre><code class="language-java">// Make a defensive copy of the adapters and add the default Call adapter.
List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);
callAdapterFactories.addAll(platform.defaultCallAdapterFactories(callbackExecutor));
</code></pre>
<p>我们可以发现这个callAdapterFactories分了两次添加，一次是callAdapterFactories变量，另一次是和平台相关的默认CallAdapterFactories，我们先看这个和平台相关默认的CallAdapterFactories，我们这里就只看Android平台</p>
<pre><code class="language-java">@Override List&lt;? extends CallAdapter.Factory&gt; defaultCallAdapterFactories(@Nullable Executor callbackExecutor) {
	if (callbackExecutor == null) throw new AssertionError();
	DefaultCallAdapterFactory executorFactory = newDefaultCallAdapterFactory(callbackExecutor);
	return Build.VERSION.SDK_INT &gt;= 24
		? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)
		: singletonList(executorFactory);
}
</code></pre>
<p>首先声明了一个Executor，看命名，这个Executor是用于回调的；然后创建了DefaultCallAdapterFactory(),我们点进这个类，看它的get()方法做了什么操作</p>
<pre><code class="language-java">@Override public @Nullable CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) {
	return new CallAdapter&lt;Object, Call&lt;?&gt;&gt;() {
		@Override public Type responseType() {
			return responseType;
		}

		@Override public Call&lt;Object&gt; adapt(Call&lt;Object&gt; call) {
			return executor == null
				? call
				: new ExecutorCallbackCall&lt;&gt;(executor, call);
		}
	};
}
</code></pre>
<p>我只截取了核心代码，我们可以看到在get()方法中返回了一个CallAdapter，还有一点应该注意，我们找这个CallAdapter的原因是什么，是不是要弄清楚它的adapt()方法做了什么，刚开始由于CallAdapter的adapt()是抽象方法，所以我们找到了现在这里；那么，现在我们可以看到DefaultCallAdapterFactory类的get()方法返回的是一个CallAdapter，在它的adapt()方法里返回了ExecutorCallbackCall对象，还记得OkHttpCall么？当时OkHttpCall是通过adapt(call)方法传进来的，DefaultCallAdapterFactory类里又原封不动的传给了ExecutorCallbackCall类，现在ExecutorCallbackCall对象做了什么处理</p>
<pre><code class="language-java">static final class ExecutorCallbackCall&lt;T&gt; implements Call&lt;T&gt; {
	final Executor callbackExecutor;
	final Call&lt;T&gt; delegate;

	ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) {
		this.callbackExecutor = callbackExecutor;
		this.delegate = delegate;
	}

	@Override public void enqueue(final Callback&lt;T&gt; callback) {
		delegate.enqueue(new Callback&lt;T&gt;() {
			@Override public void onResponse(Call&lt;T&gt; call, final Response&lt;T&gt; response) {
				callbackExecutor.execute(new Runnable() {
					@Override public void run() {
						if (delegate.isCanceled()) {
							// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.
							callback.onFailure(ExecutorCallbackCall.this, new IOException(&quot;Canceled&quot;));
						} else {
							callback.onResponse(ExecutorCallbackCall.this, response);
						}
					}
				});
			}

			@Override public void onFailure(Call&lt;T&gt; call, final Throwable t) {
				callbackExecutor.execute(new Runnable() {
					@Override public void run() {
						callback.onFailure(ExecutorCallbackCall.this, t);
					}
				});
			}
		});
	}
}
</code></pre>
<p>可以看到，ExecutorCallbackCall是DefaultCallAdapterFactory的静态内部类，继承自Retrofit的Call，与OkHttpCall是同类的，它的作用是把操作切回主线程后再交给Callback</p>
<p>分析完这个和平台相关的默认CallAdapter，我们再来看看callAdapterFactories变量中的CallAdapter，我们点击callAdapterFactories变量，看看哪里对它进行了添加操作</p>
<pre><code class="language-java">public Builder addCallAdapterFactory(CallAdapter.Factory factory) {
	callAdapterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));
	return this;
}

fun instance(): Retrofit =
	Retrofit.Builder()
	 .addConverterFactory(GsonConverterFactory.create())
	 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
	 .baseUrl(&quot;https://api.github.com/&quot;)
	 .build()
</code></pre>
<p>这些就明白了，这个CallAdapter是我们初始化Retrofit时我们主动添加进去的，我们这里添加的CallAdapterFactory是和RxJava结合使用的，像下面这样</p>
<pre><code class="language-kotlin">//GithubService.kt
@GET(&quot;/users/{user}/repos&quot;)
fun listRepos(@Path(&quot;user&quot;) user: String): Observable&lt;List&lt;Repo&gt;&gt;

//发起网络请求
val repoService = Net.instance().create(GithubService::class.java)
repoService.listRepos(&quot;hsicen&quot;)
 .observeOn(Schedulers.newThread())
 .subscribe(object : Observer&lt;List&lt;Repo&gt;&gt; {
	override fun onComplete() {

	}

	override fun onSubscribe(d: Disposable?) {

	}

	override fun onNext(value: List&lt;Repo&gt;?) {

	}

	override fun onError(e: Throwable?) {

	}
 })
</code></pre>
<p>但是Observable回调的接口太多了，在App中更推荐使用Single</p>
<pre><code class="language-kotlin">//GithubService.kt
@GET(&quot;/users/{user}/repos&quot;)
fun listRepos(@Path(&quot;user&quot;) user: String): Observable&lt;List&lt;Repo&gt;&gt;

//发起网络请求
val repoService = Net.instance().create(GithubService::class.java)
repoService.listRepos(&quot;hsicen&quot;)
	.observeOn(Schedulers.newThread())
	.subscribe(object : SingleObserver&lt;List&lt;Repo&gt;&gt; {
		override fun onSubscribe(d: Disposable?) {

		}

		override fun onSuccess(value: List&lt;Repo&gt;?) {

		}

		override fun onError(e: Throwable?) {

		}
	})
</code></pre>
<p><strong>源码分析总结</strong></p>
<ul>
<li>
<p>通过 Retrofit.create(Class)  ⽅法创建出 Service interface 的实例，从⽽使得 Service 中配置的方法变得可用，这是 Retrofit 代码结构的核心</p>
</li>
<li>
<p>Retrofit.create() ⽅法内部，使⽤的是Proxy.newProxyInstance() ⽅法来创建Service实例。这个方法会为参数中的多 interface（具体到Retrofit来说，是固定传入⼀个interface）创建一个对象，这个对象实现了所有interface的每个方法，并且每个方法的实现都是雷同的：调⽤对象实例内部的一个InvocationHandler  成员变量的 invoke() ⽅法，并把⾃⼰的⽅法信息传递进去。这样就在实质上实现了代理逻辑：interface 中的⽅法全部由⼀个另外设定的InvocationHandler对象来进⾏代理操作。并且，这些⽅法的具体实现是在运行时⽣ interface实例时才确定的，⽽不是在编译时（虽然在编译时就已经可以通过代码逻辑推断出来）。这就是「动态代理理机制」的具体含义。</p>
</li>
<li>
<p>因此，invoke() ⽅法中的逻辑，就是 Retrofit 创建 Service 实例的关键。这个⽅法内有三行关键代码，共同组成了具体逻辑：</p>
<ol>
<li>
<p>ServiceMethod 的创建 <code>loadServiceMethod(method)</code><br>
这⾏代码负责读取 interface 中原方法的信息（包括返回值类型、⽅法注解、参数类型、参数注解），并将这些信息做初步分析。实际返回的是一个 HttpServiceMethod</p>
</li>
<li>
<p>OkHttpCall  的创建  <code>new OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter)</code><br>
OkHttpCall是retrofit2.Call 的子类。这行代码负责将ServiceMethod解读到的信息（主要是一个 RequestFactory 、一个 OkHttpClient  和⼀个 ResponseConverter ）封装进 OkHttpCall ；而这个对象可以在需要的时候（例如它的 enqueue()  ⽅法被调⽤的时候），利用RequestFactory和OkHttpClient来创建一个okhttp3.Call对象，并调⽤这个okhttp3.Call对象来进行⽹络请求的发起，然后利用ResponseConverter对结果进行预处理之后，交回给 Retrofit 的 Callback</p>
</li>
<li>
<p>adapt()⽅法  <code>return callAdapter.adapt(new OkHttpCall...)</code><br>
这个方法会使用一个CallAdapter对象来把OkHttpCall对象进行转换，⽣成⼀个新的对象。默认情况下，返回的是⼀个ExecutorCallbackCall，它的作用是把操作切回主线程后再交给Callback 。另外，如果有自定义的CallAdapter，这里也可以⽣成别的类型的对象，例如 RxJava 的Observable ，来让 Retrofit 可以和 RxJava 结合使用。</p>
</li>
</ol>
</li>
</ul>
<h5 id="retrofit使用总结">Retrofit使用总结</h5>
<h5 id="1-如果要直接获取网络返回的字符串使用responsebody作为参数">1. 如果要直接获取网络返回的字符串，使用ResponseBody作为参数</h5>
<pre><code class="language-java">@GET(&quot;sore&quot;)
Call&lt;ResponseBody&gt;  getLol();
</code></pre>
<h5 id="2-一个call只能被执行一次如果要多次执行call对象可以通过clone来clone一份call从新调用">2. 一个Call只能被执行一次，如果要多次执行Call对象，可以通过clone，来clone一份call，从新调用</h5>
<pre><code class="language-java">Call newCall = mCall.clone()
</code></pre>
<h5 id="3-固定参数查询不需要动态添加参数直接调用查询">3. 固定参数查询，不需要动态添加参数，直接调用查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint?fixed=query&quot;)
Call&lt;User&gt; someEndpoint();
apiService.someEndpoint();

GET  /some/endpoint?fixed=query  HTTP/1.1
</code></pre>
<h5 id="4-动态参数查询每次网络请求查询指定参数的内容">4. 动态参数查询，每次网络请求查询指定参数的内容</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint( @Query(&quot;dynamic&quot;) String dynamic);
apiService.someEndpoint(&quot;query&quot;);

GET  /some/endpoint?dynamic=query  HTTP/1.1
</code></pre>
<h5 id="5-动态map参数查询">5. 动态Map参数查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint(@QueryMap Map&lt;String, String&gt; dynamic);
apiService.someEndpoint(Collections.singletonMap(&quot;dynamic&quot;, &quot;query&quot;));

GET  /some/endpoint?dynamic=query  HTTP/1.1
</code></pre>
<h5 id="6-省略动态参数查询">6. 省略动态参数查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint(@Query(&quot;dynamic&quot;) String dynamic);
apiService.someEndpoint(null);

GET  /some/endpoint  HTTP/1.1
</code></pre>
<h5 id="7-固定动态参数查询">7. 固定+动态参数查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint?fixed=query&quot;)
Call&lt;User&gt; someEndpoint(@Query(&quot;dynamic&quot;) String dynamic);
apiService.someEndpoint(&quot;query&quot;);

GET  /some/endpoint?fixed=query&amp;dynamic=query  HTTP/1.1
</code></pre>
<h5 id="8-路径替换查询">8. 路径替换查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint/{thing}&quot;)
Call&lt;User&gt; someEndpoint( @Path(&quot;thing&quot;) String thing);
apiService.someEndpoint(&quot;bar&quot;);

GET  /some/endpoint/bar  HTTP/1.1
</code></pre>
<h5 id="8-固定头查询">8. 固定头查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
@Headers(&quot;Accept-Encoding: application/json&quot;)
Call&lt;User&gt; someEndpoint();
apiService.someEndpoint();

GET  /some/endpoint  HTTP/1.1
Accept-Encoding: application/json
</code></pre>
<h5 id="9-动态头查询">9. 动态头查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint(@Header(&quot;Location&quot;) String location);
apiService.someEndpoint(&quot;Droidcon NYC 2015&quot;);

GET  /some/endpoint  HTTP/1.1
Location: Droidcon NYC 2015
</code></pre>
<h5 id="10-固定动态头查询">10. 固定+动态头查询</h5>
<pre><code class="language-java">@GET(&quot;/some/endpoint&quot;)
@Headers(&quot;Accept-Encoding: application/json&quot;)
Call&lt;User&gt; someEndpoint(@Header(&quot;Location&quot;) String location);
apiService.someEndpoint(&quot;Droidcon NYC 2015&quot;);

GET  /some/endpoint  HTTP/1.1
Accept-Encoding: application/json
Location: Droidcon NYC 2015
</code></pre>
<h5 id="11-post请求无body">11. Post请求，无Body</h5>
<pre><code class="language-java">@POST(&quot;/some/endpoint&quot;)
Call&lt;SomeResponse&gt; someEndpoint();
apiService.someEndpoint();

POST  /some/endpoint  HTTP/1.1
Content-Length: 0
</code></pre>
<h5 id="12-post请求有body">12. Post请求有Body</h5>
<pre><code class="language-java">@POST(&quot;/some/endpoint&quot;)
Call&lt;SomeResponse&gt; someEndpoint(@Body SomeRequest body);
apiService.someEndpoint();

POST  /some/endpoint  HTTP/1.1
Content-Length: 3
Content-Type: text/html

xdadasd
</code></pre>
<h5 id="13-表单编码字段">13. 表单编码字段</h5>
<pre><code class="language-java">@FormUrlEncoded
@POST(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint( @Field(&quot;name1&quot;) String name1, @Field(&quot;name2&quot;) String name2);
apiService.someEndpoint(&quot;value1&quot;, &quot;value2&quot;);

POST /some/endpoint HTTP/1.1
Content-Length: 25
Content-Type: application/x-www-form-urlencoded

name1=value1&amp;name2=value2
</code></pre>
<h5 id="14-表单编码字段map">14. 表单编码字段（Map）</h5>
<pre><code class="language-java">@FormUrlEncoded
@POST(&quot;/some/endpoint&quot;)
Call&lt;User&gt; someEndpoint( @FieldMap Map&lt;String, String&gt; names);
apiService.someEndpoint(ImmutableMap.of(&quot;name1&quot;, &quot;value1&quot;, &quot;name2&quot;, &quot;value2&quot;));

POST /some/endpoint HTTP/1.1
Content-Length: 25
Content-Type: application/x-www-form-urlencoded

name1=value1&amp;name2=value2
</code></pre>
<h5 id="15-动态urldynamic-url-parameter">15. 动态Url(Dynamic URL parameter)</h5>
<pre><code class="language-java">@GET
Call&lt;List&lt;Activity&gt;&gt; getActivityList(@Url String url,@QueryMap Map&lt;String, String&gt; map);
Call&lt;List&lt;Activity&gt;&gt; call = service.getActivityList(&quot;http://115.159.198.162:3001/api/ActivitySubjects&quot;, map);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>http://localhost:4000/post/hello-gridea/</id>
        <link href="http://localhost:4000/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>